---

# enable HA repo

- name: Enable HA repo (RedHat)
  command: subscription-manager repos --enable=rhel-ha-for-rhel-7-server-rpms
  when: ansible_distribution == 'RedHat'


# install pacemaker

- name: ensure pacemaker is installed (CentOS, RedHat)
  package:
    name:
      - fence-agents-all
      - pacemaker
      - pcs
      - resource-agents
    state: latest
  when: ansible_distribution in ['CentOS', 'RedHat']

- name: ensure pacemaker is installed (Ubuntu)
  package:
    name:
      - fence-agents
      - pacemaker
      - pcs
      - resource-agents
    state: latest
  when: ansible_distribution == 'Ubuntu'

- name: check if firewalld is installed (CentOS, RedHat)
  command: rpm -q firewalld
  register: firewalld_installed
  failed_when: false
  when: ansible_distribution in ['CentOS', 'RedHat']

- name: open pacemaker in firewall (CentOS, RedHat)
  firewalld:
    service: high-availability
    state: enabled
    permanent: true
    immediate: true
  when: (ansible_distribution in ['CentOS', 'RedHat']) and firewalld_installed.rc == 0

- name: reload firewall (CentOS, RedHat)
  command: firewall-cmd --reload
  when: (ansible_distribution in ['CentOS', 'RedHat']) and firewalld_installed.rc == 0

- name: open pacemaker in firewall (TCP) (Ubuntu)
  ufw:
    port: "{{ item }}"
    proto: tcp
    rule: allow
  with_items:
    - 2224
    - 3121
    - 21064
  when: ansible_distribution == 'Ubuntu'

- name: open pacemaker in firewall (UDP) (Ubuntu)
  ufw:
    port: 5405
    proto: udp
    rule: allow
  when: ansible_distribution == 'Ubuntu'

- name: setup pacemaker admin user
  user:
    name: hacluster
    password: "{{ pacemaker_cluster_password|password_hash('sha512') }}"

- name: setup pcsd service
  service:
    name: pcsd
    state: started
    enabled: yes

- name: setup pacemaker service
  service:
    name: pacemaker
    enabled: yes


# create pacemaker cluster

- name: create pacemaker cluster
  shell: |
    pcs cluster auth -u hacluster -p '{{ pacemaker_cluster_password }}' {% for server in groups['servers'] %} {{ server }} {% endfor %} &&
    pcs cluster setup --name '{{ pacemaker_cluster_name }}' {% for server in groups['servers'] %} {{ server }} {% endfor %} &&
    pcs cluster start --all &&
    pcs property set stonith-enabled=false &&
    pcs property set start-failure-is-fatal=false
  args:
    creates: /etc/corosync/corosync.conf
  when: inventory_hostname == groups['servers'][0]
