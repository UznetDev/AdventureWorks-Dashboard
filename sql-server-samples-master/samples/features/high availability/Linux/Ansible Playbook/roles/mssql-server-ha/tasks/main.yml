---

# enable HA

- name: check HA enabled
  command: /opt/mssql-tools/bin/sqlcmd -U sa -P '{{ sa_password }}' -b -Q "SELECT 'IsHadrEnabled = ' + CONVERT(NVARCHAR(100), SERVERPROPERTY('IsHadrEnabled'))"
  register: hadr_enabled

- name: enable HA
  mssql_conf:
    name: hadr.hadrenabled
    value: 1
    login_name: 'sa'
    login_password: "{{ sa_password }}"
  when: hadr_enabled.stdout.find('IsHadrEnabled = 1') == -1

- name: restart sqlservr to enable HA
  service:
    name: mssql-server
    state: restarted
  when: hadr_enabled.stdout.find('IsHadrEnabled = 1') == -1


# DBM endpoint

- name: check if firewalld is installed (CentOS, RedHat)
  command: rpm -q firewalld
  register: firewalld_installed
  failed_when: false
  when: ansible_distribution in ['CentOS', 'RedHat']

- name: open DBM endpoint in firewall (CentOS, RedHat)
  firewalld:
    port: "{{ dbm_endpoint_port }}/tcp"
    state: enabled
    permanent: true
  when: (ansible_distribution in ['CentOS', 'RedHat']) and firewalld_installed.rc == 0

- name: reload firewall (CentOS, RedHat)
  command: firewall-cmd --reload
  when: (ansible_distribution in ['CentOS', 'RedHat']) and firewalld_installed.rc == 0

- name: open DBM endpoint in firewall (Ubuntu)
  ufw:
    port: "{{ dbm_endpoint_port }}"
    proto: tcp
    rule: allow
  when: ansible_distribution == 'Ubuntu'

- name: copy DBM cert public key
  copy:
    src: "{{ dbm_cert_pub }}"
    dest: "/var/opt/mssql/data/{{ dbm_cert_pub_target }}"
    owner: mssql
    group: mssql
    mode: 0444

- name: copy DBM cert private key
  copy:
    src: "{{ dbm_cert_priv }}"
    dest: "/var/opt/mssql/data/{{ dbm_cert_priv_target }}"
    owner: mssql
    group: mssql
    mode: 0400

- name: create master key
  mssql_master_key:
    password: "{{ master_key_password }}"
    login_port: "{{ tsql_endpoint_port }}"
    login_name: 'sa'
    login_password: "{{ sa_password }}"

- name: create DBM endpoint login
  mssql_login:
    name: "{{ dbm_login }}"
    password: "{{ dbm_password }}"
    login_port: "{{ tsql_endpoint_port }}"
    login_name: 'sa'
    login_password: "{{ sa_password }}"

- name: create DBM endpoint user
  mssql_user:
    name: "{{ dbm_username }}"
    login: "{{ dbm_login }}"
    login_port: "{{ tsql_endpoint_port }}"
    login_name: 'sa'
    login_password: "{{ sa_password }}"

- name: create DBM endpoint certificate
  mssql_certificate:
    name: "{{ dbm_cert_name }}"
    authorization_username: "{{ dbm_username }}"
    pub_key_path: "/var/opt/mssql/data/{{ dbm_cert_pub_target }}"
    priv_key_path: "/var/opt/mssql/data/{{ dbm_cert_priv_target }}"
    priv_key_password: "{{ dbm_cert_password }}"
    login_port: "{{ tsql_endpoint_port }}"
    login_name: 'sa'
    login_password: "{{ sa_password }}"

- name: create DBM endpoint
  mssql_endpoint:
    name: "{{ dbm_endpoint_name }}"
    port: "{{ dbm_endpoint_port }}"
    type: DATA_MIRRORING
    dbm_cert_name: "{{ dbm_cert_name }}"
    state: started
    login_port: "{{ tsql_endpoint_port }}"
    login_name: 'sa'
    login_password: "{{ sa_password }}"

- name: grant connect on DBM endpoint
  mssql_grant_endpoint:
    name: "{{ dbm_endpoint_name }}"
    permission: CONNECT
    principal: "{{ dbm_login }}"
    login_port: "{{ tsql_endpoint_port }}"
    login_name: 'sa'
    login_password: "{{ sa_password }}"
