swagger: "2.0"
info:
  description: "OData service exposing information from WideWorldImporters database."
  version: "1.0.0"
  title: "Wide World Importers"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "sqlserversamples@microsoft.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "localhost:64959"
basePath: "/OData"
tags:
- name: "SalesOrders"
  description: "Information about SalesOrders"
- name: "SalesOrderLines"
  description: "Information about SalesOrderLines"
- name: "PurchaseOrders"
  description: "Information about PurchaseOrders"
- name: "PurchaseOrderLines"
  description: "Information about PurchaseOrderLines"
- name: "Invoices"
  description: "Information about Invoices"
- name: "SpecialDeals"
  description: "Information about SpecialDeals"
- name: "CustomerTransactions"
  description: "Information about CustomerTransactions"
- name: "SupplierTransactions"
  description: "Information about SupplierTransactions"
- name: "Customers"
  description: "Information about Customers"
- name: "Suppliers"
  description: "Information about Suppliers"
- name: "Countries"
  description: "Information about Countries"
- name: "Cities"
  description: "Information about Cities"
- name: "StateProvinces"
  description: "Information about StateProvinces"
- name: "StockItems"
  description: "Information about StockItems"
- name: "PackageTypes"
  description: "Information about PackageTypes"
- name: "Colors"
  description: "Information about Colors"
- name: "StockGroups"
  description: "Information about StockGroups"
- name: "BuyingGroups"
  description: "Information about BuyingGroups"
- name: "CustomerCategories"
  description: "Information about CustomerCategories"
- name: "SupplierCategories"
  description: "Information about SupplierCategories"
- name: "TransactionTypes"
  description: "Information about TransactionTypes"
- name: "PaymentMethods"
  description: "Information about PaymentMethods"
- name: "DeliveryMethods"
  description: "Information about DeliveryMethods"
schemes:
- "https"
- "http"
paths:

  /SalesOrders:
    get:
      tags:
      - "SalesOrders"
      summary: "Provides information about SalesOrders using OData protocol."
      description: "Enables querying SalesOrders information using OData parameters."
      operationId: "SalesOrders"
      produces:
      - "application/json"
      parameters:
      - name: "$select"
        in: "query"
        description: "Selecting the SalesOrders properties that should be returned by service."
        required: false
        type: "array"
        items:
          type: "string"
          enum:
            - "OrderID"
            - "OrderDate"
            - "CustomerPurchaseOrderNumber"
            - "ExpectedDeliveryDate"
            - "PickingCompletedWhen"
            - "CustomerID"
            - "CustomerName"
            - "PhoneNumber"
            - "FaxNumber"
            - "WebsiteURL"
            - "DeliveryLocation"
            - "SalesPerson"
            - "SalesPersonPhone"
            - "SalesPersonEmail"
        collectionFormat: "multi"
      - name: "$orderby"
        in: "query"
        description: "Ordering results by properties"
        required: false
        type: "array"
        items:
          type: "string"
          enum:
            - "OrderID"
            - "OrderID asc"
            - "OrderID desc"
            - "OrderDate"
            - "OrderDate asc"
            - "OrderDate desc"
            - "CustomerPurchaseOrderNumber"
            - "CustomerPurchaseOrderNumber asc"
            - "CustomerPurchaseOrderNumber desc"
            - "ExpectedDeliveryDate"
            - "ExpectedDeliveryDate asc"
            - "ExpectedDeliveryDate desc"
            - "PickingCompletedWhen"
            - "PickingCompletedWhen asc"
            - "PickingCompletedWhen desc"
            - "CustomerID"
            - "CustomerID asc"
            - "CustomerID desc"
            - "CustomerName"
            - "CustomerName asc"
            - "CustomerName desc"
            - "PhoneNumber"
            - "PhoneNumber asc"
            - "PhoneNumber desc"
            - "FaxNumber"
            - "FaxNumber asc"
            - "FaxNumber desc"
            - "WebsiteURL"
            - "WebsiteURL asc"
            - "WebsiteURL desc"
            - "DeliveryLocation"
            - "DeliveryLocation asc"
            - "DeliveryLocation desc"
            - "SalesPerson"
            - "SalesPerson asc"
            - "SalesPerson desc"
            - "SalesPersonPhone"
            - "SalesPersonPhone asc"
            - "SalesPersonPhone desc"
            - "SalesPersonEmail"
            - "SalesPersonEmail asc"
            - "SalesPersonEmail desc"
        collectionFormat: "multi"
      - name: "$top"
        in: "query"
        description: "Selecting the  SalesOrders properties that should be returned by the API."
        required: false
        type: "integer"
      - name: "$skip"
        in: "query"
        description: "Specify number of  SalesOrders records that should be skipped."
        required: false
        type: "integer"
      - name: "$apply"
        in: "query"
        description: "Aggregation function that should be applied on the results."
        required: false
        type: "string"
      - name: "$filter"
        in: "query"
        description: "Condition that returned  SalesOrders items must satisfy. It can contain and, or, not logical operators and lt, le, gt, ge, ne, eq relational operators."
        required: false
        type: "string"
      responses:
        200:
          description: "Provided information about SalesOrders."
        400:
          description: "The OData request is not valid"
        500:
          description: "OData service cannot process request"
  /SalesOrderLines:
    get:
      tags:
      - "SalesOrderLines"
      summary: "Provides information about SalesOrderLines using OData protocol."
      description: "Enables querying SalesOrderLines information using OData parameters."
      operationId: "SalesOrderLines"
      produces:
      - "application/json"
      parameters:
      - name: "$select"
        in: "query"
        description: "Selecting the SalesOrderLines properties that should be returned by service."
        required: false
        type: "array"
        items:
          type: "string"
          enum:
            - "OrderLineID"
            - "OrderID"
            - "Description"
            - "Quantity"
            - "UnitPrice"
            - "TaxRate"
            - "ProductName"
            - "Brand"
            - "Size"
            - "ColorName"
            - "PackageTypeName"
            - "PickingCompletedWhen"
        collectionFormat: "multi"
      - name: "$orderby"
        in: "query"
        description: "Ordering results by properties"
        required: false
        type: "array"
        items:
          type: "string"
          enum:
            - "OrderLineID"
            - "OrderLineID asc"
            - "OrderLineID desc"
            - "OrderID"
            - "OrderID asc"
            - "OrderID desc"
            - "Description"
            - "Description asc"
            - "Description desc"
            - "Quantity"
            - "Quantity asc"
            - "Quantity desc"
            - "UnitPrice"
            - "UnitPrice asc"
            - "UnitPrice desc"
            - "TaxRate"
            - "TaxRate asc"
            - "TaxRate desc"
            - "ProductName"
            - "ProductName asc"
            - "ProductName desc"
            - "Brand"
            - "Brand asc"
            - "Brand desc"
            - "Size"
            - "Size asc"
            - "Size desc"
            - "ColorName"
            - "ColorName asc"
            - "ColorName desc"
            - "PackageTypeName"
            - "PackageTypeName asc"
            - "PackageTypeName desc"
            - "PickingCompletedWhen"
            - "PickingCompletedWhen asc"
            - "PickingCompletedWhen desc"
        collectionFormat: "multi"
      - name: "$top"
        in: "query"
        description: "Selecting the  SalesOrderLines properties that should be returned by the API."
        required: false
        type: "integer"
      - name: "$skip"
        in: "query"
        description: "Specify number of  SalesOrderLines records that should be skipped."
        required: false
        type: "integer"
      - name: "$apply"
        in: "query"
        description: "Aggregation function that should be applied on the results."
        required: false
        type: "string"
      - name: "$filter"
        in: "query"
        description: "Condition that returned  SalesOrderLines items must satisfy. It can contain and, or, not logical operators and lt, le, gt, ge, ne, eq relational operators."
        required: false
        type: "string"
      responses:
        200:
          description: "Provided information about SalesOrderLines."
        400:
          description: "The OData request is not valid"
        500:
          description: "OData service cannot process request"
  /PurchaseOrders:
    get:
      tags:
      - "PurchaseOrders"
      summary: "Provides information about PurchaseOrders using OData protocol."
      description: "Enables querying PurchaseOrders information using OData parameters."
      operationId: "PurchaseOrders"
      produces:
      - "application/json"
      parameters:
      - name: "$select"
        in: "query"
        description: "Selecting the PurchaseOrders properties that should be returned by service."
        required: false
        type: "array"
        items:
          type: "string"
          enum:
            - "PurchaseOrderID"
            - "OrderDate"
            - "ExpectedDeliveryDate"
            - "SupplierReference"
            - "IsOrderFinalized"
            - "DeliveryMethodName"
            - "ContactName"
            - "ContactPhone"
            - "ContactFax"
            - "ContactEmail"
            - "SupplierID"
        collectionFormat: "multi"
      - name: "$orderby"
        in: "query"
        description: "Ordering results by properties"
        required: false
        type: "array"
        items:
          type: "string"
          enum:
            - "PurchaseOrderID"
            - "PurchaseOrderID asc"
            - "PurchaseOrderID desc"
            - "OrderDate"
            - "OrderDate asc"
            - "OrderDate desc"
            - "ExpectedDeliveryDate"
            - "ExpectedDeliveryDate asc"
            - "ExpectedDeliveryDate desc"
            - "SupplierReference"
            - "SupplierReference asc"
            - "SupplierReference desc"
            - "IsOrderFinalized"
            - "IsOrderFinalized asc"
            - "IsOrderFinalized desc"
            - "DeliveryMethodName"
            - "DeliveryMethodName asc"
            - "DeliveryMethodName desc"
            - "ContactName"
            - "ContactName asc"
            - "ContactName desc"
            - "ContactPhone"
            - "ContactPhone asc"
            - "ContactPhone desc"
            - "ContactFax"
            - "ContactFax asc"
            - "ContactFax desc"
            - "ContactEmail"
            - "ContactEmail asc"
            - "ContactEmail desc"
            - "SupplierID"
            - "SupplierID asc"
            - "SupplierID desc"
        collectionFormat: "multi"
      - name: "$top"
        in: "query"
        description: "Selecting the  PurchaseOrders properties that should be returned by the API."
        required: false
        type: "integer"
      - name: "$skip"
        in: "query"
        description: "Specify number of  PurchaseOrders records that should be skipped."
        required: false
        type: "integer"
      - name: "$apply"
        in: "query"
        description: "Aggregation function that should be applied on the results."
        required: false
        type: "string"
      - name: "$filter"
        in: "query"
        description: "Condition that returned  PurchaseOrders items must satisfy. It can contain and, or, not logical operators and lt, le, gt, ge, ne, eq relational operators."
        required: false
        type: "string"
      responses:
        200:
          description: "Provided information about PurchaseOrders."
        400:
          description: "The OData request is not valid"
        500:
          description: "OData service cannot process request"
  /PurchaseOrderLines:
    get:
      tags:
      - "PurchaseOrderLines"
      summary: "Provides information about PurchaseOrderLines using OData protocol."
      description: "Enables querying PurchaseOrderLines information using OData parameters."
      operationId: "PurchaseOrderLines"
      produces:
      - "application/json"
      parameters:
      - name: "$select"
        in: "query"
        description: "Selecting the PurchaseOrderLines properties that should be returned by service."
        required: false
        type: "array"
        items:
          type: "string"
          enum:
            - "PurchaseOrderLineID"
            - "PurchaseOrderID"
            - "Description"
            - "IsOrderLineFinalized"
            - "ProductName"
            - "Brand"
            - "Size"
            - "ColorName"
            - "PackageTypeName"
            - "OrderedOuters"
            - "ReceivedOuters"
            - "ExpectedUnitPricePerOuter"
        collectionFormat: "multi"
      - name: "$orderby"
        in: "query"
        description: "Ordering results by properties"
        required: false
        type: "array"
        items:
          type: "string"
          enum:
            - "PurchaseOrderLineID"
            - "PurchaseOrderLineID asc"
            - "PurchaseOrderLineID desc"
            - "PurchaseOrderID"
            - "PurchaseOrderID asc"
            - "PurchaseOrderID desc"
            - "Description"
            - "Description asc"
            - "Description desc"
            - "IsOrderLineFinalized"
            - "IsOrderLineFinalized asc"
            - "IsOrderLineFinalized desc"
            - "ProductName"
            - "ProductName asc"
            - "ProductName desc"
            - "Brand"
            - "Brand asc"
            - "Brand desc"
            - "Size"
            - "Size asc"
            - "Size desc"
            - "ColorName"
            - "ColorName asc"
            - "ColorName desc"
            - "PackageTypeName"
            - "PackageTypeName asc"
            - "PackageTypeName desc"
            - "OrderedOuters"
            - "OrderedOuters asc"
            - "OrderedOuters desc"
            - "ReceivedOuters"
            - "ReceivedOuters asc"
            - "ReceivedOuters desc"
            - "ExpectedUnitPricePerOuter"
            - "ExpectedUnitPricePerOuter asc"
            - "ExpectedUnitPricePerOuter desc"
        collectionFormat: "multi"
      - name: "$top"
        in: "query"
        description: "Selecting the  PurchaseOrderLines properties that should be returned by the API."
        required: false
        type: "integer"
      - name: "$skip"
        in: "query"
        description: "Specify number of  PurchaseOrderLines records that should be skipped."
        required: false
        type: "integer"
      - name: "$apply"
        in: "query"
        description: "Aggregation function that should be applied on the results."
        required: false
        type: "string"
      - name: "$filter"
        in: "query"
        description: "Condition that returned  PurchaseOrderLines items must satisfy. It can contain and, or, not logical operators and lt, le, gt, ge, ne, eq relational operators."
        required: false
        type: "string"
      responses:
        200:
          description: "Provided information about PurchaseOrderLines."
        400:
          description: "The OData request is not valid"
        500:
          description: "OData service cannot process request"
  /Invoices:
    get:
      tags:
      - "Invoices"
      summary: "Provides information about Invoices using OData protocol."
      description: "Enables querying Invoices information using OData parameters."
      operationId: "Invoices"
      produces:
      - "application/json"
      parameters:
      - name: "$select"
        in: "query"
        description: "Selecting the Invoices properties that should be returned by service."
        required: false
        type: "array"
        items:
          type: "string"
          enum:
            - "InvoiceID"
            - "InvoiceDate"
            - "CustomerPurchaseOrderNumber"
            - "IsCreditNote"
            - "TotalDryItems"
            - "TotalChillerItems"
            - "DeliveryRun"
            - "RunPosition"
            - "ReturnedDeliveryData"
            - "ConfirmedDeliveryTime"
            - "ConfirmedReceivedBy"
            - "CustomerName"
            - "SalesPersonName"
            - "ContactName"
            - "ContactPhone"
            - "ContactEmail"
            - "SalesPersonEmail"
            - "DeliveryMethodName"
            - "CustomerID"
            - "OrderID"
            - "DeliveryMethodID"
            - "ContactPersonID"
            - "AccountsPersonID"
            - "SalespersonPersonID"
            - "PackedByPersonID"
        collectionFormat: "multi"
      - name: "$orderby"
        in: "query"
        description: "Ordering results by properties"
        required: false
        type: "array"
        items:
          type: "string"
          enum:
            - "InvoiceID"
            - "InvoiceID asc"
            - "InvoiceID desc"
            - "InvoiceDate"
            - "InvoiceDate asc"
            - "InvoiceDate desc"
            - "CustomerPurchaseOrderNumber"
            - "CustomerPurchaseOrderNumber asc"
            - "CustomerPurchaseOrderNumber desc"
            - "IsCreditNote"
            - "IsCreditNote asc"
            - "IsCreditNote desc"
            - "TotalDryItems"
            - "TotalDryItems asc"
            - "TotalDryItems desc"
            - "TotalChillerItems"
            - "TotalChillerItems asc"
            - "TotalChillerItems desc"
            - "DeliveryRun"
            - "DeliveryRun asc"
            - "DeliveryRun desc"
            - "RunPosition"
            - "RunPosition asc"
            - "RunPosition desc"
            - "ReturnedDeliveryData"
            - "ReturnedDeliveryData asc"
            - "ReturnedDeliveryData desc"
            - "ConfirmedDeliveryTime"
            - "ConfirmedDeliveryTime asc"
            - "ConfirmedDeliveryTime desc"
            - "ConfirmedReceivedBy"
            - "ConfirmedReceivedBy asc"
            - "ConfirmedReceivedBy desc"
            - "CustomerName"
            - "CustomerName asc"
            - "CustomerName desc"
            - "SalesPersonName"
            - "SalesPersonName asc"
            - "SalesPersonName desc"
            - "ContactName"
            - "ContactName asc"
            - "ContactName desc"
            - "ContactPhone"
            - "ContactPhone asc"
            - "ContactPhone desc"
            - "ContactEmail"
            - "ContactEmail asc"
            - "ContactEmail desc"
            - "SalesPersonEmail"
            - "SalesPersonEmail asc"
            - "SalesPersonEmail desc"
            - "DeliveryMethodName"
            - "DeliveryMethodName asc"
            - "DeliveryMethodName desc"
            - "CustomerID"
            - "CustomerID asc"
            - "CustomerID desc"
            - "OrderID"
            - "OrderID asc"
            - "OrderID desc"
            - "DeliveryMethodID"
            - "DeliveryMethodID asc"
            - "DeliveryMethodID desc"
            - "ContactPersonID"
            - "ContactPersonID asc"
            - "ContactPersonID desc"
            - "AccountsPersonID"
            - "AccountsPersonID asc"
            - "AccountsPersonID desc"
            - "SalespersonPersonID"
            - "SalespersonPersonID asc"
            - "SalespersonPersonID desc"
            - "PackedByPersonID"
            - "PackedByPersonID asc"
            - "PackedByPersonID desc"
        collectionFormat: "multi"
      - name: "$top"
        in: "query"
        description: "Selecting the  Invoices properties that should be returned by the API."
        required: false
        type: "integer"
      - name: "$skip"
        in: "query"
        description: "Specify number of  Invoices records that should be skipped."
        required: false
        type: "integer"
      - name: "$apply"
        in: "query"
        description: "Aggregation function that should be applied on the results."
        required: false
        type: "string"
      - name: "$filter"
        in: "query"
        description: "Condition that returned  Invoices items must satisfy. It can contain and, or, not logical operators and lt, le, gt, ge, ne, eq relational operators."
        required: false
        type: "string"
      responses:
        200:
          description: "Provided information about Invoices."
        400:
          description: "The OData request is not valid"
        500:
          description: "OData service cannot process request"
  /SpecialDeals:
    get:
      tags:
      - "SpecialDeals"
      summary: "Provides information about SpecialDeals using OData protocol."
      description: "Enables querying SpecialDeals information using OData parameters."
      operationId: "SpecialDeals"
      produces:
      - "application/json"
      parameters:
      - name: "$select"
        in: "query"
        description: "Selecting the SpecialDeals properties that should be returned by service."
        required: false
        type: "array"
        items:
          type: "string"
          enum:
            - "SpecialDealID"
            - "DealDescription"
            - "StartDate"
            - "EndDate"
            - "DiscountAmount"
            - "DiscountPercentage"
            - "UnitPrice"
            - "StockItemName"
            - "Brand"
            - "Size"
            - "CustomerName"
            - "BuyingGroupName"
            - "CustomerCategoryName"
            - "StockItemID"
            - "CustomerID"
            - "BuyingGroupID"
            - "CustomerCategoryID"
            - "StockGroupID"
        collectionFormat: "multi"
      - name: "$orderby"
        in: "query"
        description: "Ordering results by properties"
        required: false
        type: "array"
        items:
          type: "string"
          enum:
            - "SpecialDealID"
            - "SpecialDealID asc"
            - "SpecialDealID desc"
            - "DealDescription"
            - "DealDescription asc"
            - "DealDescription desc"
            - "StartDate"
            - "StartDate asc"
            - "StartDate desc"
            - "EndDate"
            - "EndDate asc"
            - "EndDate desc"
            - "DiscountAmount"
            - "DiscountAmount asc"
            - "DiscountAmount desc"
            - "DiscountPercentage"
            - "DiscountPercentage asc"
            - "DiscountPercentage desc"
            - "UnitPrice"
            - "UnitPrice asc"
            - "UnitPrice desc"
            - "StockItemName"
            - "StockItemName asc"
            - "StockItemName desc"
            - "Brand"
            - "Brand asc"
            - "Brand desc"
            - "Size"
            - "Size asc"
            - "Size desc"
            - "CustomerName"
            - "CustomerName asc"
            - "CustomerName desc"
            - "BuyingGroupName"
            - "BuyingGroupName asc"
            - "BuyingGroupName desc"
            - "CustomerCategoryName"
            - "CustomerCategoryName asc"
            - "CustomerCategoryName desc"
            - "StockItemID"
            - "StockItemID asc"
            - "StockItemID desc"
            - "CustomerID"
            - "CustomerID asc"
            - "CustomerID desc"
            - "BuyingGroupID"
            - "BuyingGroupID asc"
            - "BuyingGroupID desc"
            - "CustomerCategoryID"
            - "CustomerCategoryID asc"
            - "CustomerCategoryID desc"
            - "StockGroupID"
            - "StockGroupID asc"
            - "StockGroupID desc"
        collectionFormat: "multi"
      - name: "$top"
        in: "query"
        description: "Selecting the  SpecialDeals properties that should be returned by the API."
        required: false
        type: "integer"
      - name: "$skip"
        in: "query"
        description: "Specify number of  SpecialDeals records that should be skipped."
        required: false
        type: "integer"
      - name: "$apply"
        in: "query"
        description: "Aggregation function that should be applied on the results."
        required: false
        type: "string"
      - name: "$filter"
        in: "query"
        description: "Condition that returned  SpecialDeals items must satisfy. It can contain and, or, not logical operators and lt, le, gt, ge, ne, eq relational operators."
        required: false
        type: "string"
      responses:
        200:
          description: "Provided information about SpecialDeals."
        400:
          description: "The OData request is not valid"
        500:
          description: "OData service cannot process request"
  /CustomerTransactions:
    get:
      tags:
      - "CustomerTransactions"
      summary: "Provides information about CustomerTransactions using OData protocol."
      description: "Enables querying CustomerTransactions information using OData parameters."
      operationId: "CustomerTransactions"
      produces:
      - "application/json"
      parameters:
      - name: "$select"
        in: "query"
        description: "Selecting the CustomerTransactions properties that should be returned by service."
        required: false
        type: "array"
        items:
          type: "string"
          enum:
            - "CustomerTransactionID"
            - "TransactionDate"
            - "AmountExcludingTax"
            - "TaxAmount"
            - "TransactionAmount"
            - "OutstandingBalance"
            - "FinalizationDate"
            - "IsFinalized"
            - "CustomerName"
            - "TransactionTypeName"
            - "InvoiceDate"
            - "CustomerPurchaseOrderNumber"
            - "PaymentMethodName"
            - "CustomerID"
            - "TransactionTypeID"
            - "InvoiceID"
            - "PaymentMethodID"
        collectionFormat: "multi"
      - name: "$orderby"
        in: "query"
        description: "Ordering results by properties"
        required: false
        type: "array"
        items:
          type: "string"
          enum:
            - "CustomerTransactionID"
            - "CustomerTransactionID asc"
            - "CustomerTransactionID desc"
            - "TransactionDate"
            - "TransactionDate asc"
            - "TransactionDate desc"
            - "AmountExcludingTax"
            - "AmountExcludingTax asc"
            - "AmountExcludingTax desc"
            - "TaxAmount"
            - "TaxAmount asc"
            - "TaxAmount desc"
            - "TransactionAmount"
            - "TransactionAmount asc"
            - "TransactionAmount desc"
            - "OutstandingBalance"
            - "OutstandingBalance asc"
            - "OutstandingBalance desc"
            - "FinalizationDate"
            - "FinalizationDate asc"
            - "FinalizationDate desc"
            - "IsFinalized"
            - "IsFinalized asc"
            - "IsFinalized desc"
            - "CustomerName"
            - "CustomerName asc"
            - "CustomerName desc"
            - "TransactionTypeName"
            - "TransactionTypeName asc"
            - "TransactionTypeName desc"
            - "InvoiceDate"
            - "InvoiceDate asc"
            - "InvoiceDate desc"
            - "CustomerPurchaseOrderNumber"
            - "CustomerPurchaseOrderNumber asc"
            - "CustomerPurchaseOrderNumber desc"
            - "PaymentMethodName"
            - "PaymentMethodName asc"
            - "PaymentMethodName desc"
            - "CustomerID"
            - "CustomerID asc"
            - "CustomerID desc"
            - "TransactionTypeID"
            - "TransactionTypeID asc"
            - "TransactionTypeID desc"
            - "InvoiceID"
            - "InvoiceID asc"
            - "InvoiceID desc"
            - "PaymentMethodID"
            - "PaymentMethodID asc"
            - "PaymentMethodID desc"
        collectionFormat: "multi"
      - name: "$top"
        in: "query"
        description: "Selecting the  CustomerTransactions properties that should be returned by the API."
        required: false
        type: "integer"
      - name: "$skip"
        in: "query"
        description: "Specify number of  CustomerTransactions records that should be skipped."
        required: false
        type: "integer"
      - name: "$apply"
        in: "query"
        description: "Aggregation function that should be applied on the results."
        required: false
        type: "string"
      - name: "$filter"
        in: "query"
        description: "Condition that returned  CustomerTransactions items must satisfy. It can contain and, or, not logical operators and lt, le, gt, ge, ne, eq relational operators."
        required: false
        type: "string"
      responses:
        200:
          description: "Provided information about CustomerTransactions."
        400:
          description: "The OData request is not valid"
        500:
          description: "OData service cannot process request"
  /SupplierTransactions:
    get:
      tags:
      - "SupplierTransactions"
      summary: "Provides information about SupplierTransactions using OData protocol."
      description: "Enables querying SupplierTransactions information using OData parameters."
      operationId: "SupplierTransactions"
      produces:
      - "application/json"
      parameters:
      - name: "$select"
        in: "query"
        description: "Selecting the SupplierTransactions properties that should be returned by service."
        required: false
        type: "array"
        items:
          type: "string"
          enum:
            - "SupplierTransactionID"
            - "TransactionDate"
            - "AmountExcludingTax"
            - "TaxAmount"
            - "TransactionAmount"
            - "OutstandingBalance"
            - "FinalizationDate"
            - "IsFinalized"
            - "SupplierName"
            - "TransactionTypeName"
            - "PaymentMethodName"
            - "SupplierID"
            - "TransactionTypeID"
            - "PurchaseOrderID"
            - "PaymentMethodID"
            - "OrderDate"
            - "IsOrderFinalized"
            - "ExpectedDeliveryDate"
            - "SupplierReference"
        collectionFormat: "multi"
      - name: "$orderby"
        in: "query"
        description: "Ordering results by properties"
        required: false
        type: "array"
        items:
          type: "string"
          enum:
            - "SupplierTransactionID"
            - "SupplierTransactionID asc"
            - "SupplierTransactionID desc"
            - "TransactionDate"
            - "TransactionDate asc"
            - "TransactionDate desc"
            - "AmountExcludingTax"
            - "AmountExcludingTax asc"
            - "AmountExcludingTax desc"
            - "TaxAmount"
            - "TaxAmount asc"
            - "TaxAmount desc"
            - "TransactionAmount"
            - "TransactionAmount asc"
            - "TransactionAmount desc"
            - "OutstandingBalance"
            - "OutstandingBalance asc"
            - "OutstandingBalance desc"
            - "FinalizationDate"
            - "FinalizationDate asc"
            - "FinalizationDate desc"
            - "IsFinalized"
            - "IsFinalized asc"
            - "IsFinalized desc"
            - "SupplierName"
            - "SupplierName asc"
            - "SupplierName desc"
            - "TransactionTypeName"
            - "TransactionTypeName asc"
            - "TransactionTypeName desc"
            - "PaymentMethodName"
            - "PaymentMethodName asc"
            - "PaymentMethodName desc"
            - "SupplierID"
            - "SupplierID asc"
            - "SupplierID desc"
            - "TransactionTypeID"
            - "TransactionTypeID asc"
            - "TransactionTypeID desc"
            - "PurchaseOrderID"
            - "PurchaseOrderID asc"
            - "PurchaseOrderID desc"
            - "PaymentMethodID"
            - "PaymentMethodID asc"
            - "PaymentMethodID desc"
            - "OrderDate"
            - "OrderDate asc"
            - "OrderDate desc"
            - "IsOrderFinalized"
            - "IsOrderFinalized asc"
            - "IsOrderFinalized desc"
            - "ExpectedDeliveryDate"
            - "ExpectedDeliveryDate asc"
            - "ExpectedDeliveryDate desc"
            - "SupplierReference"
            - "SupplierReference asc"
            - "SupplierReference desc"
        collectionFormat: "multi"
      - name: "$top"
        in: "query"
        description: "Selecting the  SupplierTransactions properties that should be returned by the API."
        required: false
        type: "integer"
      - name: "$skip"
        in: "query"
        description: "Specify number of  SupplierTransactions records that should be skipped."
        required: false
        type: "integer"
      - name: "$apply"
        in: "query"
        description: "Aggregation function that should be applied on the results."
        required: false
        type: "string"
      - name: "$filter"
        in: "query"
        description: "Condition that returned  SupplierTransactions items must satisfy. It can contain and, or, not logical operators and lt, le, gt, ge, ne, eq relational operators."
        required: false
        type: "string"
      responses:
        200:
          description: "Provided information about SupplierTransactions."
        400:
          description: "The OData request is not valid"
        500:
          description: "OData service cannot process request"
  /Customers:
    get:
      tags:
      - "Customers"
      summary: "Provides information about Customers using OData protocol."
      description: "Enables querying Customers information using OData parameters."
      operationId: "Customers"
      produces:
      - "application/json"
      parameters:
      - name: "$select"
        in: "query"
        description: "Selecting the Customers properties that should be returned by service."
        required: false
        type: "array"
        items:
          type: "string"
          enum:
            - "CustomerID"
            - "CustomerName"
            - "AccountOpenedDate"
            - "CustomerCategoryName"
            - "PrimaryContact"
            - "AlternateContact"
            - "PhoneNumber"
            - "FaxNumber"
            - "WebsiteURL"
            - "PostalAddressLine1"
            - "PostalAddressLine2"
            - "PostalCity"
            - "PostalCityID"
            - "PostalPostalCode"
            - "CreditLimit"
            - "IsOnCreditHold"
            - "IsStatementSent"
            - "PaymentDays"
            - "RunPosition"
            - "StandardDiscountPercentage"
            - "BuyingGroupName"
            - "DeliveryLocation"
            - "BuyingGroupID"
            - "BillToCustomerID"
            - "CustomerCategoryID"
            - "PrimaryContactPersonID"
            - "AlternateContactPersonID"
        collectionFormat: "multi"
      - name: "$orderby"
        in: "query"
        description: "Ordering results by properties"
        required: false
        type: "array"
        items:
          type: "string"
          enum:
            - "CustomerID"
            - "CustomerID asc"
            - "CustomerID desc"
            - "CustomerName"
            - "CustomerName asc"
            - "CustomerName desc"
            - "AccountOpenedDate"
            - "AccountOpenedDate asc"
            - "AccountOpenedDate desc"
            - "CustomerCategoryName"
            - "CustomerCategoryName asc"
            - "CustomerCategoryName desc"
            - "PrimaryContact"
            - "PrimaryContact asc"
            - "PrimaryContact desc"
            - "AlternateContact"
            - "AlternateContact asc"
            - "AlternateContact desc"
            - "PhoneNumber"
            - "PhoneNumber asc"
            - "PhoneNumber desc"
            - "FaxNumber"
            - "FaxNumber asc"
            - "FaxNumber desc"
            - "WebsiteURL"
            - "WebsiteURL asc"
            - "WebsiteURL desc"
            - "PostalAddressLine1"
            - "PostalAddressLine1 asc"
            - "PostalAddressLine1 desc"
            - "PostalAddressLine2"
            - "PostalAddressLine2 asc"
            - "PostalAddressLine2 desc"
            - "PostalCity"
            - "PostalCity asc"
            - "PostalCity desc"
            - "PostalCityID"
            - "PostalCityID asc"
            - "PostalCityID desc"
            - "PostalPostalCode"
            - "PostalPostalCode asc"
            - "PostalPostalCode desc"
            - "CreditLimit"
            - "CreditLimit asc"
            - "CreditLimit desc"
            - "IsOnCreditHold"
            - "IsOnCreditHold asc"
            - "IsOnCreditHold desc"
            - "IsStatementSent"
            - "IsStatementSent asc"
            - "IsStatementSent desc"
            - "PaymentDays"
            - "PaymentDays asc"
            - "PaymentDays desc"
            - "RunPosition"
            - "RunPosition asc"
            - "RunPosition desc"
            - "StandardDiscountPercentage"
            - "StandardDiscountPercentage asc"
            - "StandardDiscountPercentage desc"
            - "BuyingGroupName"
            - "BuyingGroupName asc"
            - "BuyingGroupName desc"
            - "DeliveryLocation"
            - "DeliveryLocation asc"
            - "DeliveryLocation desc"
            - "BuyingGroupID"
            - "BuyingGroupID asc"
            - "BuyingGroupID desc"
            - "BillToCustomerID"
            - "BillToCustomerID asc"
            - "BillToCustomerID desc"
            - "CustomerCategoryID"
            - "CustomerCategoryID asc"
            - "CustomerCategoryID desc"
            - "PrimaryContactPersonID"
            - "PrimaryContactPersonID asc"
            - "PrimaryContactPersonID desc"
            - "AlternateContactPersonID"
            - "AlternateContactPersonID asc"
            - "AlternateContactPersonID desc"
        collectionFormat: "multi"
      - name: "$top"
        in: "query"
        description: "Selecting the  Customers properties that should be returned by the API."
        required: false
        type: "integer"
      - name: "$skip"
        in: "query"
        description: "Specify number of  Customers records that should be skipped."
        required: false
        type: "integer"
      - name: "$apply"
        in: "query"
        description: "Aggregation function that should be applied on the results."
        required: false
        type: "string"
      - name: "$filter"
        in: "query"
        description: "Condition that returned  Customers items must satisfy. It can contain and, or, not logical operators and lt, le, gt, ge, ne, eq relational operators."
        required: false
        type: "string"
      responses:
        200:
          description: "Provided information about Customers."
        400:
          description: "The OData request is not valid"
        500:
          description: "OData service cannot process request"
  /Suppliers:
    get:
      tags:
      - "Suppliers"
      summary: "Provides information about Suppliers using OData protocol."
      description: "Enables querying Suppliers information using OData parameters."
      operationId: "Suppliers"
      produces:
      - "application/json"
      parameters:
      - name: "$select"
        in: "query"
        description: "Selecting the Suppliers properties that should be returned by service."
        required: false
        type: "array"
        items:
          type: "string"
          enum:
            - "SupplierID"
            - "SupplierName"
            - "SupplierCategoryName"
            - "PrimaryContact"
            - "AlternateContact"
            - "PhoneNumber"
            - "FaxNumber"
            - "WebsiteURL"
            - "SupplierReference"
            - "DeliveryLocation"
            - "BankAccountName"
            - "BankAccountBranch"
            - "BankAccountCode"
            - "BankAccountNumber"
            - "BankInternationalCode"
            - "PostalAddressLine1"
            - "PostalAddressLine2"
            - "PostalPostalCode"
            - "PaymentDays"
            - "SupplierCategoryID"
        collectionFormat: "multi"
      - name: "$orderby"
        in: "query"
        description: "Ordering results by properties"
        required: false
        type: "array"
        items:
          type: "string"
          enum:
            - "SupplierID"
            - "SupplierID asc"
            - "SupplierID desc"
            - "SupplierName"
            - "SupplierName asc"
            - "SupplierName desc"
            - "SupplierCategoryName"
            - "SupplierCategoryName asc"
            - "SupplierCategoryName desc"
            - "PrimaryContact"
            - "PrimaryContact asc"
            - "PrimaryContact desc"
            - "AlternateContact"
            - "AlternateContact asc"
            - "AlternateContact desc"
            - "PhoneNumber"
            - "PhoneNumber asc"
            - "PhoneNumber desc"
            - "FaxNumber"
            - "FaxNumber asc"
            - "FaxNumber desc"
            - "WebsiteURL"
            - "WebsiteURL asc"
            - "WebsiteURL desc"
            - "SupplierReference"
            - "SupplierReference asc"
            - "SupplierReference desc"
            - "DeliveryLocation"
            - "DeliveryLocation asc"
            - "DeliveryLocation desc"
            - "BankAccountName"
            - "BankAccountName asc"
            - "BankAccountName desc"
            - "BankAccountBranch"
            - "BankAccountBranch asc"
            - "BankAccountBranch desc"
            - "BankAccountCode"
            - "BankAccountCode asc"
            - "BankAccountCode desc"
            - "BankAccountNumber"
            - "BankAccountNumber asc"
            - "BankAccountNumber desc"
            - "BankInternationalCode"
            - "BankInternationalCode asc"
            - "BankInternationalCode desc"
            - "PostalAddressLine1"
            - "PostalAddressLine1 asc"
            - "PostalAddressLine1 desc"
            - "PostalAddressLine2"
            - "PostalAddressLine2 asc"
            - "PostalAddressLine2 desc"
            - "PostalPostalCode"
            - "PostalPostalCode asc"
            - "PostalPostalCode desc"
            - "PaymentDays"
            - "PaymentDays asc"
            - "PaymentDays desc"
            - "SupplierCategoryID"
            - "SupplierCategoryID asc"
            - "SupplierCategoryID desc"
        collectionFormat: "multi"
      - name: "$top"
        in: "query"
        description: "Selecting the  Suppliers properties that should be returned by the API."
        required: false
        type: "integer"
      - name: "$skip"
        in: "query"
        description: "Specify number of  Suppliers records that should be skipped."
        required: false
        type: "integer"
      - name: "$apply"
        in: "query"
        description: "Aggregation function that should be applied on the results."
        required: false
        type: "string"
      - name: "$filter"
        in: "query"
        description: "Condition that returned  Suppliers items must satisfy. It can contain and, or, not logical operators and lt, le, gt, ge, ne, eq relational operators."
        required: false
        type: "string"
      responses:
        200:
          description: "Provided information about Suppliers."
        400:
          description: "The OData request is not valid"
        500:
          description: "OData service cannot process request"
  /Countries:
    get:
      tags:
      - "Countries"
      summary: "Provides information about Countries using OData protocol."
      description: "Enables querying Countries information using OData parameters."
      operationId: "Countries"
      produces:
      - "application/json"
      parameters:
      - name: "$select"
        in: "query"
        description: "Selecting the Countries properties that should be returned by service."
        required: false
        type: "array"
        items:
          type: "string"
          enum:
            - "CountryID"
            - "CountryName"
            - "FormalName"
            - "IsoAlpha3Code"
            - "IsoNumericCode"
            - "CountryType"
            - "LatestRecordedPopulation"
            - "Continent"
            - "Region"
            - "Subregion"
        collectionFormat: "multi"
      - name: "$orderby"
        in: "query"
        description: "Ordering results by properties"
        required: false
        type: "array"
        items:
          type: "string"
          enum:
            - "CountryID"
            - "CountryID asc"
            - "CountryID desc"
            - "CountryName"
            - "CountryName asc"
            - "CountryName desc"
            - "FormalName"
            - "FormalName asc"
            - "FormalName desc"
            - "IsoAlpha3Code"
            - "IsoAlpha3Code asc"
            - "IsoAlpha3Code desc"
            - "IsoNumericCode"
            - "IsoNumericCode asc"
            - "IsoNumericCode desc"
            - "CountryType"
            - "CountryType asc"
            - "CountryType desc"
            - "LatestRecordedPopulation"
            - "LatestRecordedPopulation asc"
            - "LatestRecordedPopulation desc"
            - "Continent"
            - "Continent asc"
            - "Continent desc"
            - "Region"
            - "Region asc"
            - "Region desc"
            - "Subregion"
            - "Subregion asc"
            - "Subregion desc"
        collectionFormat: "multi"
      - name: "$top"
        in: "query"
        description: "Selecting the  Countries properties that should be returned by the API."
        required: false
        type: "integer"
      - name: "$skip"
        in: "query"
        description: "Specify number of  Countries records that should be skipped."
        required: false
        type: "integer"
      - name: "$apply"
        in: "query"
        description: "Aggregation function that should be applied on the results."
        required: false
        type: "string"
      - name: "$filter"
        in: "query"
        description: "Condition that returned  Countries items must satisfy. It can contain and, or, not logical operators and lt, le, gt, ge, ne, eq relational operators."
        required: false
        type: "string"
      responses:
        200:
          description: "Provided information about Countries."
        400:
          description: "The OData request is not valid"
        500:
          description: "OData service cannot process request"
  /Cities:
    get:
      tags:
      - "Cities"
      summary: "Provides information about Cities using OData protocol."
      description: "Enables querying Cities information using OData parameters."
      operationId: "Cities"
      produces:
      - "application/json"
      parameters:
      - name: "$select"
        in: "query"
        description: "Selecting the Cities properties that should be returned by service."
        required: false
        type: "array"
        items:
          type: "string"
          enum:
            - "CityID"
            - "CityName"
            - "StateProvinceID"
            - "LatestRecordedPopulation"
        collectionFormat: "multi"
      - name: "$orderby"
        in: "query"
        description: "Ordering results by properties"
        required: false
        type: "array"
        items:
          type: "string"
          enum:
            - "CityID"
            - "CityID asc"
            - "CityID desc"
            - "CityName"
            - "CityName asc"
            - "CityName desc"
            - "StateProvinceID"
            - "StateProvinceID asc"
            - "StateProvinceID desc"
            - "LatestRecordedPopulation"
            - "LatestRecordedPopulation asc"
            - "LatestRecordedPopulation desc"
        collectionFormat: "multi"
      - name: "$top"
        in: "query"
        description: "Selecting the  Cities properties that should be returned by the API."
        required: false
        type: "integer"
      - name: "$skip"
        in: "query"
        description: "Specify number of  Cities records that should be skipped."
        required: false
        type: "integer"
      - name: "$apply"
        in: "query"
        description: "Aggregation function that should be applied on the results."
        required: false
        type: "string"
      - name: "$filter"
        in: "query"
        description: "Condition that returned  Cities items must satisfy. It can contain and, or, not logical operators and lt, le, gt, ge, ne, eq relational operators."
        required: false
        type: "string"
      responses:
        200:
          description: "Provided information about Cities."
        400:
          description: "The OData request is not valid"
        500:
          description: "OData service cannot process request"
  /StateProvinces:
    get:
      tags:
      - "StateProvinces"
      summary: "Provides information about StateProvinces using OData protocol."
      description: "Enables querying StateProvinces information using OData parameters."
      operationId: "StateProvinces"
      produces:
      - "application/json"
      parameters:
      - name: "$select"
        in: "query"
        description: "Selecting the StateProvinces properties that should be returned by service."
        required: false
        type: "array"
        items:
          type: "string"
          enum:
            - "StateProvinceID"
            - "StateProvinceCode"
            - "StateProvinceName"
            - "CountryID"
            - "SalesTerritory"
            - "LatestRecordedPopulation"
        collectionFormat: "multi"
      - name: "$orderby"
        in: "query"
        description: "Ordering results by properties"
        required: false
        type: "array"
        items:
          type: "string"
          enum:
            - "StateProvinceID"
            - "StateProvinceID asc"
            - "StateProvinceID desc"
            - "StateProvinceCode"
            - "StateProvinceCode asc"
            - "StateProvinceCode desc"
            - "StateProvinceName"
            - "StateProvinceName asc"
            - "StateProvinceName desc"
            - "CountryID"
            - "CountryID asc"
            - "CountryID desc"
            - "SalesTerritory"
            - "SalesTerritory asc"
            - "SalesTerritory desc"
            - "LatestRecordedPopulation"
            - "LatestRecordedPopulation asc"
            - "LatestRecordedPopulation desc"
        collectionFormat: "multi"
      - name: "$top"
        in: "query"
        description: "Selecting the  StateProvinces properties that should be returned by the API."
        required: false
        type: "integer"
      - name: "$skip"
        in: "query"
        description: "Specify number of  StateProvinces records that should be skipped."
        required: false
        type: "integer"
      - name: "$apply"
        in: "query"
        description: "Aggregation function that should be applied on the results."
        required: false
        type: "string"
      - name: "$filter"
        in: "query"
        description: "Condition that returned  StateProvinces items must satisfy. It can contain and, or, not logical operators and lt, le, gt, ge, ne, eq relational operators."
        required: false
        type: "string"
      responses:
        200:
          description: "Provided information about StateProvinces."
        400:
          description: "The OData request is not valid"
        500:
          description: "OData service cannot process request"
  /StockItems:
    get:
      tags:
      - "StockItems"
      summary: "Provides information about StockItems using OData protocol."
      description: "Enables querying StockItems information using OData parameters."
      operationId: "StockItems"
      produces:
      - "application/json"
      parameters:
      - name: "$select"
        in: "query"
        description: "Selecting the StockItems properties that should be returned by service."
        required: false
        type: "array"
        items:
          type: "string"
          enum:
            - "StockItemID"
            - "StockItemName"
            - "SupplierName"
            - "SupplierReference"
            - "ColorName"
            - "OuterPackage"
            - "UnitPackage"
            - "Brand"
            - "Size"
            - "LeadTimeDays"
            - "QuantityPerOuter"
            - "IsChillerStock"
            - "Barcode"
            - "TaxRate"
            - "UnitPrice"
            - "RecommendedRetailPrice"
            - "TypicalWeightPerUnit"
            - "MarketingComments"
            - "InternalComments"
            - "CustomFields"
            - "QuantityOnHand"
            - "BinLocation"
            - "LastStocktakeQuantity"
            - "LastCostPrice"
            - "ReorderLevel"
            - "TargetStockLevel"
            - "SupplierID"
            - "ColorID"
            - "UnitPackageID"
            - "OuterPackageID"
        collectionFormat: "multi"
      - name: "$orderby"
        in: "query"
        description: "Ordering results by properties"
        required: false
        type: "array"
        items:
          type: "string"
          enum:
            - "StockItemID"
            - "StockItemID asc"
            - "StockItemID desc"
            - "StockItemName"
            - "StockItemName asc"
            - "StockItemName desc"
            - "SupplierName"
            - "SupplierName asc"
            - "SupplierName desc"
            - "SupplierReference"
            - "SupplierReference asc"
            - "SupplierReference desc"
            - "ColorName"
            - "ColorName asc"
            - "ColorName desc"
            - "OuterPackage"
            - "OuterPackage asc"
            - "OuterPackage desc"
            - "UnitPackage"
            - "UnitPackage asc"
            - "UnitPackage desc"
            - "Brand"
            - "Brand asc"
            - "Brand desc"
            - "Size"
            - "Size asc"
            - "Size desc"
            - "LeadTimeDays"
            - "LeadTimeDays asc"
            - "LeadTimeDays desc"
            - "QuantityPerOuter"
            - "QuantityPerOuter asc"
            - "QuantityPerOuter desc"
            - "IsChillerStock"
            - "IsChillerStock asc"
            - "IsChillerStock desc"
            - "Barcode"
            - "Barcode asc"
            - "Barcode desc"
            - "TaxRate"
            - "TaxRate asc"
            - "TaxRate desc"
            - "UnitPrice"
            - "UnitPrice asc"
            - "UnitPrice desc"
            - "RecommendedRetailPrice"
            - "RecommendedRetailPrice asc"
            - "RecommendedRetailPrice desc"
            - "TypicalWeightPerUnit"
            - "TypicalWeightPerUnit asc"
            - "TypicalWeightPerUnit desc"
            - "MarketingComments"
            - "MarketingComments asc"
            - "MarketingComments desc"
            - "InternalComments"
            - "InternalComments asc"
            - "InternalComments desc"
            - "CustomFields"
            - "CustomFields asc"
            - "CustomFields desc"
            - "QuantityOnHand"
            - "QuantityOnHand asc"
            - "QuantityOnHand desc"
            - "BinLocation"
            - "BinLocation asc"
            - "BinLocation desc"
            - "LastStocktakeQuantity"
            - "LastStocktakeQuantity asc"
            - "LastStocktakeQuantity desc"
            - "LastCostPrice"
            - "LastCostPrice asc"
            - "LastCostPrice desc"
            - "ReorderLevel"
            - "ReorderLevel asc"
            - "ReorderLevel desc"
            - "TargetStockLevel"
            - "TargetStockLevel asc"
            - "TargetStockLevel desc"
            - "SupplierID"
            - "SupplierID asc"
            - "SupplierID desc"
            - "ColorID"
            - "ColorID asc"
            - "ColorID desc"
            - "UnitPackageID"
            - "UnitPackageID asc"
            - "UnitPackageID desc"
            - "OuterPackageID"
            - "OuterPackageID asc"
            - "OuterPackageID desc"
        collectionFormat: "multi"
      - name: "$top"
        in: "query"
        description: "Selecting the  StockItems properties that should be returned by the API."
        required: false
        type: "integer"
      - name: "$skip"
        in: "query"
        description: "Specify number of  StockItems records that should be skipped."
        required: false
        type: "integer"
      - name: "$apply"
        in: "query"
        description: "Aggregation function that should be applied on the results."
        required: false
        type: "string"
      - name: "$filter"
        in: "query"
        description: "Condition that returned  StockItems items must satisfy. It can contain and, or, not logical operators and lt, le, gt, ge, ne, eq relational operators."
        required: false
        type: "string"
      responses:
        200:
          description: "Provided information about StockItems."
        400:
          description: "The OData request is not valid"
        500:
          description: "OData service cannot process request"
  /PackageTypes:
    get:
      tags:
      - "PackageTypes"
      summary: "Provides information about PackageTypes using OData protocol."
      description: "Enables querying PackageTypes information using OData parameters."
      operationId: "PackageTypes"
      produces:
      - "application/json"
      parameters:
      - name: "$select"
        in: "query"
        description: "Selecting the PackageTypes properties that should be returned by service."
        required: false
        type: "array"
        items:
          type: "string"
          enum:
            - "PackageTypeID"
            - "PackageTypeName"
        collectionFormat: "multi"
      - name: "$orderby"
        in: "query"
        description: "Ordering results by properties"
        required: false
        type: "array"
        items:
          type: "string"
          enum:
            - "PackageTypeID"
            - "PackageTypeID asc"
            - "PackageTypeID desc"
            - "PackageTypeName"
            - "PackageTypeName asc"
            - "PackageTypeName desc"
        collectionFormat: "multi"
      - name: "$top"
        in: "query"
        description: "Selecting the  PackageTypes properties that should be returned by the API."
        required: false
        type: "integer"
      - name: "$skip"
        in: "query"
        description: "Specify number of  PackageTypes records that should be skipped."
        required: false
        type: "integer"
      - name: "$apply"
        in: "query"
        description: "Aggregation function that should be applied on the results."
        required: false
        type: "string"
      - name: "$filter"
        in: "query"
        description: "Condition that returned  PackageTypes items must satisfy. It can contain and, or, not logical operators and lt, le, gt, ge, ne, eq relational operators."
        required: false
        type: "string"
      responses:
        200:
          description: "Provided information about PackageTypes."
        400:
          description: "The OData request is not valid"
        500:
          description: "OData service cannot process request"
  /Colors:
    get:
      tags:
      - "Colors"
      summary: "Provides information about Colors using OData protocol."
      description: "Enables querying Colors information using OData parameters."
      operationId: "Colors"
      produces:
      - "application/json"
      parameters:
      - name: "$select"
        in: "query"
        description: "Selecting the Colors properties that should be returned by service."
        required: false
        type: "array"
        items:
          type: "string"
          enum:
            - "ColorID"
            - "ColorName"
        collectionFormat: "multi"
      - name: "$orderby"
        in: "query"
        description: "Ordering results by properties"
        required: false
        type: "array"
        items:
          type: "string"
          enum:
            - "ColorID"
            - "ColorID asc"
            - "ColorID desc"
            - "ColorName"
            - "ColorName asc"
            - "ColorName desc"
        collectionFormat: "multi"
      - name: "$top"
        in: "query"
        description: "Selecting the  Colors properties that should be returned by the API."
        required: false
        type: "integer"
      - name: "$skip"
        in: "query"
        description: "Specify number of  Colors records that should be skipped."
        required: false
        type: "integer"
      - name: "$apply"
        in: "query"
        description: "Aggregation function that should be applied on the results."
        required: false
        type: "string"
      - name: "$filter"
        in: "query"
        description: "Condition that returned  Colors items must satisfy. It can contain and, or, not logical operators and lt, le, gt, ge, ne, eq relational operators."
        required: false
        type: "string"
      responses:
        200:
          description: "Provided information about Colors."
        400:
          description: "The OData request is not valid"
        500:
          description: "OData service cannot process request"
  /StockGroups:
    get:
      tags:
      - "StockGroups"
      summary: "Provides information about StockGroups using OData protocol."
      description: "Enables querying StockGroups information using OData parameters."
      operationId: "StockGroups"
      produces:
      - "application/json"
      parameters:
      - name: "$select"
        in: "query"
        description: "Selecting the StockGroups properties that should be returned by service."
        required: false
        type: "array"
        items:
          type: "string"
          enum:
            - "StockGroupID"
            - "StockGroupName"
        collectionFormat: "multi"
      - name: "$orderby"
        in: "query"
        description: "Ordering results by properties"
        required: false
        type: "array"
        items:
          type: "string"
          enum:
            - "StockGroupID"
            - "StockGroupID asc"
            - "StockGroupID desc"
            - "StockGroupName"
            - "StockGroupName asc"
            - "StockGroupName desc"
        collectionFormat: "multi"
      - name: "$top"
        in: "query"
        description: "Selecting the  StockGroups properties that should be returned by the API."
        required: false
        type: "integer"
      - name: "$skip"
        in: "query"
        description: "Specify number of  StockGroups records that should be skipped."
        required: false
        type: "integer"
      - name: "$apply"
        in: "query"
        description: "Aggregation function that should be applied on the results."
        required: false
        type: "string"
      - name: "$filter"
        in: "query"
        description: "Condition that returned  StockGroups items must satisfy. It can contain and, or, not logical operators and lt, le, gt, ge, ne, eq relational operators."
        required: false
        type: "string"
      responses:
        200:
          description: "Provided information about StockGroups."
        400:
          description: "The OData request is not valid"
        500:
          description: "OData service cannot process request"
  /BuyingGroups:
    get:
      tags:
      - "BuyingGroups"
      summary: "Provides information about BuyingGroups using OData protocol."
      description: "Enables querying BuyingGroups information using OData parameters."
      operationId: "BuyingGroups"
      produces:
      - "application/json"
      parameters:
      - name: "$select"
        in: "query"
        description: "Selecting the BuyingGroups properties that should be returned by service."
        required: false
        type: "array"
        items:
          type: "string"
          enum:
            - "BuyingGroupID"
            - "BuyingGroupName"
        collectionFormat: "multi"
      - name: "$orderby"
        in: "query"
        description: "Ordering results by properties"
        required: false
        type: "array"
        items:
          type: "string"
          enum:
            - "BuyingGroupID"
            - "BuyingGroupID asc"
            - "BuyingGroupID desc"
            - "BuyingGroupName"
            - "BuyingGroupName asc"
            - "BuyingGroupName desc"
        collectionFormat: "multi"
      - name: "$top"
        in: "query"
        description: "Selecting the  BuyingGroups properties that should be returned by the API."
        required: false
        type: "integer"
      - name: "$skip"
        in: "query"
        description: "Specify number of  BuyingGroups records that should be skipped."
        required: false
        type: "integer"
      - name: "$apply"
        in: "query"
        description: "Aggregation function that should be applied on the results."
        required: false
        type: "string"
      - name: "$filter"
        in: "query"
        description: "Condition that returned  BuyingGroups items must satisfy. It can contain and, or, not logical operators and lt, le, gt, ge, ne, eq relational operators."
        required: false
        type: "string"
      responses:
        200:
          description: "Provided information about BuyingGroups."
        400:
          description: "The OData request is not valid"
        500:
          description: "OData service cannot process request"
  /CustomerCategories:
    get:
      tags:
      - "CustomerCategories"
      summary: "Provides information about CustomerCategories using OData protocol."
      description: "Enables querying CustomerCategories information using OData parameters."
      operationId: "CustomerCategories"
      produces:
      - "application/json"
      parameters:
      - name: "$select"
        in: "query"
        description: "Selecting the CustomerCategories properties that should be returned by service."
        required: false
        type: "array"
        items:
          type: "string"
          enum:
            - "CustomerCategoryID"
            - "CustomerCategoryName"
        collectionFormat: "multi"
      - name: "$orderby"
        in: "query"
        description: "Ordering results by properties"
        required: false
        type: "array"
        items:
          type: "string"
          enum:
            - "CustomerCategoryID"
            - "CustomerCategoryID asc"
            - "CustomerCategoryID desc"
            - "CustomerCategoryName"
            - "CustomerCategoryName asc"
            - "CustomerCategoryName desc"
        collectionFormat: "multi"
      - name: "$top"
        in: "query"
        description: "Selecting the  CustomerCategories properties that should be returned by the API."
        required: false
        type: "integer"
      - name: "$skip"
        in: "query"
        description: "Specify number of  CustomerCategories records that should be skipped."
        required: false
        type: "integer"
      - name: "$apply"
        in: "query"
        description: "Aggregation function that should be applied on the results."
        required: false
        type: "string"
      - name: "$filter"
        in: "query"
        description: "Condition that returned  CustomerCategories items must satisfy. It can contain and, or, not logical operators and lt, le, gt, ge, ne, eq relational operators."
        required: false
        type: "string"
      responses:
        200:
          description: "Provided information about CustomerCategories."
        400:
          description: "The OData request is not valid"
        500:
          description: "OData service cannot process request"
  /SupplierCategories:
    get:
      tags:
      - "SupplierCategories"
      summary: "Provides information about SupplierCategories using OData protocol."
      description: "Enables querying SupplierCategories information using OData parameters."
      operationId: "SupplierCategories"
      produces:
      - "application/json"
      parameters:
      - name: "$select"
        in: "query"
        description: "Selecting the SupplierCategories properties that should be returned by service."
        required: false
        type: "array"
        items:
          type: "string"
          enum:
            - "SupplierCategoryID"
            - "SupplierCategoryName"
        collectionFormat: "multi"
      - name: "$orderby"
        in: "query"
        description: "Ordering results by properties"
        required: false
        type: "array"
        items:
          type: "string"
          enum:
            - "SupplierCategoryID"
            - "SupplierCategoryID asc"
            - "SupplierCategoryID desc"
            - "SupplierCategoryName"
            - "SupplierCategoryName asc"
            - "SupplierCategoryName desc"
        collectionFormat: "multi"
      - name: "$top"
        in: "query"
        description: "Selecting the  SupplierCategories properties that should be returned by the API."
        required: false
        type: "integer"
      - name: "$skip"
        in: "query"
        description: "Specify number of  SupplierCategories records that should be skipped."
        required: false
        type: "integer"
      - name: "$apply"
        in: "query"
        description: "Aggregation function that should be applied on the results."
        required: false
        type: "string"
      - name: "$filter"
        in: "query"
        description: "Condition that returned  SupplierCategories items must satisfy. It can contain and, or, not logical operators and lt, le, gt, ge, ne, eq relational operators."
        required: false
        type: "string"
      responses:
        200:
          description: "Provided information about SupplierCategories."
        400:
          description: "The OData request is not valid"
        500:
          description: "OData service cannot process request"
  /TransactionTypes:
    get:
      tags:
      - "TransactionTypes"
      summary: "Provides information about TransactionTypes using OData protocol."
      description: "Enables querying TransactionTypes information using OData parameters."
      operationId: "TransactionTypes"
      produces:
      - "application/json"
      parameters:
      - name: "$select"
        in: "query"
        description: "Selecting the TransactionTypes properties that should be returned by service."
        required: false
        type: "array"
        items:
          type: "string"
          enum:
            - "TransactionTypeID"
            - "TransactionTypeName"
        collectionFormat: "multi"
      - name: "$orderby"
        in: "query"
        description: "Ordering results by properties"
        required: false
        type: "array"
        items:
          type: "string"
          enum:
            - "TransactionTypeID"
            - "TransactionTypeID asc"
            - "TransactionTypeID desc"
            - "TransactionTypeName"
            - "TransactionTypeName asc"
            - "TransactionTypeName desc"
        collectionFormat: "multi"
      - name: "$top"
        in: "query"
        description: "Selecting the  TransactionTypes properties that should be returned by the API."
        required: false
        type: "integer"
      - name: "$skip"
        in: "query"
        description: "Specify number of  TransactionTypes records that should be skipped."
        required: false
        type: "integer"
      - name: "$apply"
        in: "query"
        description: "Aggregation function that should be applied on the results."
        required: false
        type: "string"
      - name: "$filter"
        in: "query"
        description: "Condition that returned  TransactionTypes items must satisfy. It can contain and, or, not logical operators and lt, le, gt, ge, ne, eq relational operators."
        required: false
        type: "string"
      responses:
        200:
          description: "Provided information about TransactionTypes."
        400:
          description: "The OData request is not valid"
        500:
          description: "OData service cannot process request"
  /PaymentMethods:
    get:
      tags:
      - "PaymentMethods"
      summary: "Provides information about PaymentMethods using OData protocol."
      description: "Enables querying PaymentMethods information using OData parameters."
      operationId: "PaymentMethods"
      produces:
      - "application/json"
      parameters:
      - name: "$select"
        in: "query"
        description: "Selecting the PaymentMethods properties that should be returned by service."
        required: false
        type: "array"
        items:
          type: "string"
          enum:
            - "PaymentMethodID"
            - "PaymentMethodName"
        collectionFormat: "multi"
      - name: "$orderby"
        in: "query"
        description: "Ordering results by properties"
        required: false
        type: "array"
        items:
          type: "string"
          enum:
            - "PaymentMethodID"
            - "PaymentMethodID asc"
            - "PaymentMethodID desc"
            - "PaymentMethodName"
            - "PaymentMethodName asc"
            - "PaymentMethodName desc"
        collectionFormat: "multi"
      - name: "$top"
        in: "query"
        description: "Selecting the  PaymentMethods properties that should be returned by the API."
        required: false
        type: "integer"
      - name: "$skip"
        in: "query"
        description: "Specify number of  PaymentMethods records that should be skipped."
        required: false
        type: "integer"
      - name: "$apply"
        in: "query"
        description: "Aggregation function that should be applied on the results."
        required: false
        type: "string"
      - name: "$filter"
        in: "query"
        description: "Condition that returned  PaymentMethods items must satisfy. It can contain and, or, not logical operators and lt, le, gt, ge, ne, eq relational operators."
        required: false
        type: "string"
      responses:
        200:
          description: "Provided information about PaymentMethods."
        400:
          description: "The OData request is not valid"
        500:
          description: "OData service cannot process request"
  /DeliveryMethods:
    get:
      tags:
      - "DeliveryMethods"
      summary: "Provides information about DeliveryMethods using OData protocol."
      description: "Enables querying DeliveryMethods information using OData parameters."
      operationId: "DeliveryMethods"
      produces:
      - "application/json"
      parameters:
      - name: "$select"
        in: "query"
        description: "Selecting the DeliveryMethods properties that should be returned by service."
        required: false
        type: "array"
        items:
          type: "string"
          enum:
            - "DeliveryMethodID"
            - "DeliveryMethodName"
        collectionFormat: "multi"
      - name: "$orderby"
        in: "query"
        description: "Ordering results by properties"
        required: false
        type: "array"
        items:
          type: "string"
          enum:
            - "DeliveryMethodID"
            - "DeliveryMethodID asc"
            - "DeliveryMethodID desc"
            - "DeliveryMethodName"
            - "DeliveryMethodName asc"
            - "DeliveryMethodName desc"
        collectionFormat: "multi"
      - name: "$top"
        in: "query"
        description: "Selecting the  DeliveryMethods properties that should be returned by the API."
        required: false
        type: "integer"
      - name: "$skip"
        in: "query"
        description: "Specify number of  DeliveryMethods records that should be skipped."
        required: false
        type: "integer"
      - name: "$apply"
        in: "query"
        description: "Aggregation function that should be applied on the results."
        required: false
        type: "string"
      - name: "$filter"
        in: "query"
        description: "Condition that returned  DeliveryMethods items must satisfy. It can contain and, or, not logical operators and lt, le, gt, ge, ne, eq relational operators."
        required: false
        type: "string"
      responses:
        200:
          description: "Provided information about DeliveryMethods."
        400:
          description: "The OData request is not valid"
        500:
          description: "OData service cannot process request"