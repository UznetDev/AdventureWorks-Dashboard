<#@ output extension=".cs"#>
<#@ assembly name="Newtonsoft.Json" #>
<#@ template language="C#" hostspecific="True" #>
<#
	var o = Newtonsoft.Json.Linq.JObject.Parse(System.IO.File.ReadAllText(this.Host.ResolvePath("..") + "\\appsettings.json"));
	var json = o["ApiModel"].ToString();
	TableDef[] config = Newtonsoft.Json.JsonConvert.DeserializeObject<TableDef[]>(json);
#>
using Belgrade.SqlClient;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using MsSql.RestApi;
using System;
using System.IO;
using System.Security.Claims;
using System.Threading.Tasks;

namespace wwi_app.Controllers
{
    public partial class ODataController : Controller
    {
		ICommand sqlCmd = null;

        public ODataController(ICommand sqlCommandService)
        {
			this.sqlCmd = sqlCommandService;
        }

<# foreach(var t in config) {#>

<# if(string.IsNullOrEmpty(t.ODataColumns)) continue; #>
		TableSpec <#= t.Table.ToLower() #> = new TableSpec("<#= t.Schema #>","<#= t.Table #>", "<#= t.ODataColumns #>");

		[HttpGet]
        public async Task <#= t.Table #>(int? id)
        {
			await this.OData(<#= t.Table.ToLower() #>, id: id).Process(this.sqlCmd);
        }
		
<# if(!t.IsReadOnly) { #>
        [Authorize]
		[HttpPut]
        public async Task <#= t.Table #>(int id, string body)
        {
            var <#= t.Table.Replace("ies","y").TrimEnd('s') #> = new StreamReader(Request.Body).ReadToEnd();

			await sqlCmd
				.Sql($"EXEC WebApi.Update<#= t.Table.Replace("ies","y").TrimEnd('s') #>FromJson @<#= t.Table.Replace("ies","y").TrimEnd('s') #>, @<#= t.Table.Replace("ies","y").TrimEnd('s') #>ID = {id}, @UserID = @UserID")
				.Param("<#= t.Table.Replace("ies","y").TrimEnd('s') #>", <#= t.Table.Replace("ies","y").TrimEnd('s') #>)
				.Param("UserID", Convert.ToInt32(this.User.FindFirst(ClaimTypes.Sid).Value))
				.Exec();
        }

        [Authorize]
        [HttpPost]
        public async Task <#= t.Table #>()
        {
            var <#= t.Table #> = new StreamReader(Request.Body).ReadToEnd();
			await sqlCmd
				.Sql($"EXEC WebApi.Insert<#= t.Table #>FromJson @<#= t.Table #>, @UserID = @UserID")
				.Param("<#= t.Table #>", <#= t.Table #>)
				.Param("UserID", Convert.ToInt32(this.User.FindFirst(ClaimTypes.Sid).Value))
				.Exec();
        }

		[Authorize]
        [HttpDelete]
        public async Task <#= t.Table #>(int id)
        {
            await this.sqlCmd.Sql($"EXEC WebApi.Delete<#= t.Table.Replace("ies","y").TrimEnd('s') #> @<#= t.Table.Replace("ies","y").TrimEnd('s') #>ID = {id}").Exec();
        }
<# } #>

<# } #>


    }
}

<#+
	public class TableDef {
		public string Schema {get; set;}
		public string Table {get; set;}
		public string ODataColumns {get; set;}
		public bool IsReadOnly {get; set;}
	}
#>